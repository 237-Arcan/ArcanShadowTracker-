"""
Module pour l'onglet Syst√®me d'Apprentissage d'ArcanShadow.
Ce module visualise l'√©volution de l'intelligence du syst√®me et ses processus d'apprentissage.
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import random

def generate_learning_data(days=30):
    """
    G√©n√®re des donn√©es simul√©es d'apprentissage du syst√®me.
    
    Args:
        days (int): Nombre de jours d'historique √† g√©n√©rer
        
    Returns:
        dict: Donn√©es d'apprentissage du syst√®me
    """
    # Date de d√©but (il y a 'days' jours)
    start_date = datetime.now() - timedelta(days=days)
    dates = [start_date + timedelta(days=i) for i in range(days)]
    
    # Pr√©cision des pr√©dictions (tendance √† l'am√©lioration avec du bruit)
    base_accuracy = 0.65
    noise = np.random.normal(0, 0.03, days)
    trend = np.linspace(0, 0.15, days)  # Am√©lioration progressive
    accuracy = np.clip(base_accuracy + trend + noise, 0.5, 0.95)
    
    # Nombre de mod√®les/patterns d√©couverts (augmentation progressive)
    patterns_base = 45
    new_patterns = np.cumsum(np.random.poisson(0.7, days))
    patterns = patterns_base + new_patterns
    
    # Nombre d'√©v√©nements d'apprentissage
    learning_events = np.random.poisson(5, days)
    
    # M√©triques de confiance
    confidence_base = 0.6
    confidence_noise = np.random.normal(0, 0.02, days)
    confidence_trend = np.linspace(0, 0.2, days)
    confidence = np.clip(confidence_base + confidence_trend + confidence_noise, 0.5, 0.9)
    
    # Cr√©er un DataFrame pour faciliter la manipulation
    df = pd.DataFrame({
        'date': dates,
        'accuracy': accuracy,
        'patterns': patterns,
        'learning_events': learning_events,
        'confidence': confidence
    })
    
    # G√©n√©rer des √©v√©nements d'apprentissage significatifs
    significant_events = []
    for i in range(3, days, 7):
        if random.random() > 0.5:
            event_date = dates[i]
            event_types = [
                "Recalibration des patterns", 
                "Transfert d'apprentissage", 
                "Optimisation du mod√®le",
                "Adaptation contextuelle",
                "D√©couverte de corr√©lation"
            ]
            event_type = random.choice(event_types)
            
            if event_type == "Recalibration des patterns":
                description = "ArcanBrain a recalibr√© ses mod√®les de reconnaissance de patterns suite √† des r√©sultats inattendus."
            elif event_type == "Transfert d'apprentissage":
                description = "Les connaissances acquises sur un championnat ont √©t√© transf√©r√©es et adapt√©es √† un autre contexte."
            elif event_type == "Optimisation du mod√®le":
                description = "Les param√®tres du mod√®le pr√©dictif ont √©t√© optimis√©s pour am√©liorer la pr√©cision des pr√©visions."
            elif event_type == "Adaptation contextuelle":
                description = "Le syst√®me a ajust√© ses analyses pour tenir compte de changements dans le contexte des comp√©titions."
            else:
                description = "ArcanShadow a d√©couvert une nouvelle corr√©lation statistique significative entre diff√©rents facteurs."
                
            impact = random.uniform(0.03, 0.08)
            
            significant_events.append({
                'date': event_date,
                'type': event_type,
                'description': description,
                'impact': impact
            })
    
    # Modules du syst√®me et leurs m√©triques
    modules = [
        {"name": "ArcanBrain", "efficiency": 0.88, "learning_rate": 0.76, "complexity": 0.92},
        {"name": "ArcanReflex", "efficiency": 0.84, "learning_rate": 0.89, "complexity": 0.65},
        {"name": "ArcanSentinel", "efficiency": 0.91, "learning_rate": 0.72, "complexity": 0.78},
        {"name": "NumeriCode", "efficiency": 0.79, "learning_rate": 0.83, "complexity": 0.87},
        {"name": "ScoreMatrix", "efficiency": 0.86, "learning_rate": 0.75, "complexity": 0.70}
    ]
    
    return {
        "daily_metrics": df,
        "significant_events": significant_events,
        "modules": modules
    }

def create_accuracy_chart(data):
    """
    Cr√©e un graphique d'√©volution de la pr√©cision des pr√©dictions.
    
    Args:
        data (pd.DataFrame): Donn√©es quotidiennes d'apprentissage
        
    Returns:
        plotly.graph_objects.Figure: Graphique g√©n√©r√©
    """
    fig = go.Figure()
    
    # Ajouter la ligne de pr√©cision
    fig.add_trace(go.Scatter(
        x=data['date'],
        y=data['accuracy'],
        mode='lines',
        name='Pr√©cision des pr√©dictions',
        line=dict(color='rgba(163, 119, 254, 0.8)', width=3),
        hovertemplate='%{y:.1%}<extra>Pr√©cision</extra>'
    ))
    
    # Ajouter la ligne de confiance
    fig.add_trace(go.Scatter(
        x=data['date'],
        y=data['confidence'],
        mode='lines',
        name='Niveau de confiance',
        line=dict(color='rgba(26, 188, 156, 0.8)', width=3, dash='dash'),
        hovertemplate='%{y:.1%}<extra>Confiance</extra>'
    ))
    
    # Mise en page
    fig.update_layout(
        title='√âvolution de la pr√©cision et de la confiance',
        xaxis_title='Date',
        yaxis_title='M√©trique',
        yaxis_tickformat='.0%',
        hovermode='x unified',
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        plot_bgcolor='rgba(0,0,0,0.02)',
        height=400
    )
    
    # Ajouter une zone d'objectif
    fig.add_shape(
        type="rect",
        xref="paper",
        yref="y",
        x0=0,
        y0=0.8,
        x1=1,
        y1=1,
        fillcolor="rgba(0,255,0,0.1)",
        line_width=0,
        layer="below"
    )
    
    # Ajouter une ligne pour l'objectif
    fig.add_shape(
        type="line",
        xref="paper",
        yref="y",
        x0=0,
        y0=0.8,
        x1=1,
        y1=0.8,
        line=dict(
            color="green",
            width=2,
            dash="dash",
        )
    )
    
    # Ajouter des annotations pour les √©v√©nements significatifs
    #for event in significant_events:
    #    fig.add_annotation(...)
    
    return fig

def create_patterns_chart(data):
    """
    Cr√©e un graphique d'√©volution du nombre de patterns identifi√©s.
    
    Args:
        data (pd.DataFrame): Donn√©es quotidiennes d'apprentissage
        
    Returns:
        plotly.graph_objects.Figure: Graphique g√©n√©r√©
    """
    fig = go.Figure()
    
    # Ajouter la ligne de patterns
    fig.add_trace(go.Scatter(
        x=data['date'],
        y=data['patterns'],
        mode='lines',
        name='Patterns identifi√©s',
        line=dict(color='rgba(231, 76, 60, 0.8)', width=3),
        fill='tozeroy',
        fillcolor='rgba(231, 76, 60, 0.1)'
    ))
    
    # Mise en page
    fig.update_layout(
        title='√âvolution du nombre de patterns identifi√©s',
        xaxis_title='Date',
        yaxis_title='Nombre de patterns',
        plot_bgcolor='rgba(0,0,0,0.02)',
        height=350
    )
    
    return fig

def create_module_radar_chart(modules):
    """
    Cr√©e un graphique radar comparant les performances des modules.
    
    Args:
        modules (list): Liste des modules et leurs m√©triques
        
    Returns:
        plotly.graph_objects.Figure: Graphique g√©n√©r√©
    """
    fig = go.Figure()
    
    categories = ['Efficacit√©', 'Taux d\'apprentissage', 'Complexit√©']
    
    for module in modules:
        fig.add_trace(go.Scatterpolar(
            r=[module["efficiency"], module["learning_rate"], module["complexity"]],
            theta=categories,
            fill='toself',
            name=module["name"]
        ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 1]
            )
        ),
        title="Comparaison des modules ArcanShadow",
        height=450,
        showlegend=True
    )
    
    return fig

def create_learning_events_chart(data):
    """
    Cr√©e un graphique des √©v√©nements d'apprentissage.
    
    Args:
        data (pd.DataFrame): Donn√©es quotidiennes d'apprentissage
        
    Returns:
        plotly.graph_objects.Figure: Graphique g√©n√©r√©
    """
    fig = go.Figure()
    
    # Ajouter les barres d'√©v√©nements d'apprentissage
    fig.add_trace(go.Bar(
        x=data['date'],
        y=data['learning_events'],
        marker_color='rgba(94, 75, 139, 0.7)',
        name='Evenements apprentissage'
    ))
    
    # Mise en page
    fig.update_layout(
        title='Fr√©quence des √©v√©nements d\'apprentissage',
        xaxis_title='Date',
        yaxis_title='Nombre d\'√©v√©nements',
        plot_bgcolor='rgba(0,0,0,0.02)',
        height=350
    )
    
    return fig

def display_learning_system_tab():
    """
    Affiche l'onglet Syst√®me d'Apprentissage complet.
    """
    st.markdown("## üß† Syst√®me d'Apprentissage")
    st.markdown("Visualisation de l'√©volution du syst√®me ArcanShadow et des processus d'apprentissage de ses modules.")
    
    # G√©n√©ration des donn√©es d'apprentissage
    if "learning_data" not in st.session_state:
        st.session_state.learning_data = generate_learning_data()
    
    # Acc√®s aux donn√©es
    data = st.session_state.learning_data["daily_metrics"]
    significant_events = st.session_state.learning_data["significant_events"]
    modules = st.session_state.learning_data["modules"]
    
    # En-t√™te avec m√©triques cl√©s
    metrics_col1, metrics_col2, metrics_col3 = st.columns(3)
    
    with metrics_col1:
        current_accuracy = data['accuracy'].iloc[-1]
        st.metric(
            label="Pr√©cision actuelle",
            value=f"{current_accuracy:.1%}",
            delta=f"{current_accuracy - data['accuracy'].iloc[-7]:.1%} vs sem. pr√©c√©dente"
        )
    
    with metrics_col2:
        current_patterns = int(data['patterns'].iloc[-1])
        st.metric(
            label="Patterns identifi√©s",
            value=f"{current_patterns}",
            delta=f"{int(current_patterns - data['patterns'].iloc[-7])} nouveaux"
        )
    
    with metrics_col3:
        current_confidence = data['confidence'].iloc[-1]
        st.metric(
            label="Niveau de confiance",
            value=f"{current_confidence:.1%}",
            delta=f"{current_confidence - data['confidence'].iloc[-7]:.1%} vs sem. pr√©c√©dente"
        )
    
    # Graphiques d'√©volution
    st.markdown("### √âvolution des performances")
    
    # Graphique principal de pr√©cision et confiance
    accuracy_chart = create_accuracy_chart(data)
    st.plotly_chart(accuracy_chart, use_container_width=True)
    
    # Graphiques secondaires en colonnes
    col1, col2 = st.columns(2)
    
    with col1:
        patterns_chart = create_patterns_chart(data)
        st.plotly_chart(patterns_chart, use_container_width=True)
    
    with col2:
        events_chart = create_learning_events_chart(data)
        st.plotly_chart(events_chart, use_container_width=True)
    
    # Comparaison des modules
    st.markdown("### Performance des modules")
    
    # Radar chart des modules
    module_chart = create_module_radar_chart(modules)
    st.plotly_chart(module_chart, use_container_width=True)
    
    # Tableau des m√©triques par module
    module_df = pd.DataFrame([
        {
            "Module": m["name"],
            "Efficacit√©": f"{m['efficiency']:.0%}",
            "Taux d'apprentissage": f"{m['learning_rate']:.0%}",
            "Complexit√©": f"{m['complexity']:.0%}"
        } for m in modules
    ])
    
    st.dataframe(
        module_df,
        use_container_width=True,
        hide_index=True
    )
    
    # √âv√©nements d'apprentissage significatifs
    st.markdown("### √âv√©nements d'apprentissage significatifs")
    
    for event in significant_events:
        event_date = event['date'].strftime("%d/%m/%Y")
        impact_color = "green" if event['impact'] > 0.06 else "orange"
        
        st.markdown(f"""
        <div style="padding: 15px; border-left: 4px solid #A377FE; background-color: rgba(45, 45, 68, 0.2); 
        margin-bottom: 15px; border-radius: 0 10px 10px 0;">
            <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                <h4 style="margin: 0; color: #A377FE;">{event['type']}</h4>
                <span style="color: gray;">{event_date}</span>
            </div>
            <p style="margin: 5px 0 10px 0;">{event['description']}</p>
            <div style="font-size: 0.9em;">
                <span>Impact: </span>
                <span style="color: {impact_color}; font-weight: bold;">+{event['impact']:.1%}</span>
                <span> sur la pr√©cision des pr√©dictions</span>
            </div>
        </div>
        """, unsafe_allow_html=True)

def add_learning_system_tab(tab):
    """
    Ajoute l'onglet Syst√®me d'Apprentissage √† l'application principale.
    
    Args:
        tab: Objet tab Streamlit
    """
    with tab:
        display_learning_system_tab()