"""
Module d'initialisation et d'int√©gration avanc√©e pour ArcanShadow.
Ce module initialise et connecte GematriaOracle, PredictiveForge et IntegrationHub
avec l'architecture ArcanShadow existante.
"""
import os
import logging
import json
from datetime import datetime

# Importer les modules d'int√©gration
from modules.gematria_oracle import GematriaOracle
from modules.predictive_forge import PredictiveForge
from modules.integration_hub import IntegrationHub

# Cr√©er un logger
logger = logging.getLogger("AdvancedIntegration")
logger.setLevel(logging.INFO)

# Configurer le gestionnaire de fichiers
if not os.path.exists("logs"):
    os.makedirs("logs")
log_file = os.path.join("logs", "advanced_integration.log")
file_handler = logging.FileHandler(log_file)

# Configurer le gestionnaire de console
console_handler = logging.StreamHandler()

# Cr√©er le formateur et l'ajouter aux gestionnaires
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)

# Ajouter les gestionnaires au logger
logger.addHandler(file_handler)
logger.addHandler(console_handler)

def initialize_integration(meta_systems=None):
    """
    Initialise l'int√©gration des modules avanc√©s dans ArcanShadow.
    
    Args:
        meta_systems: Module MetaSystems pour l'int√©gration des √©v√©nements
        
    Returns:
        dict: Instances des modules int√©gr√©s
    """
    logger.info("Initialisation de l'int√©gration avanc√©e")
    
    # Cr√©er le r√©pertoire de donn√©es si n√©cessaire
    data_dir = "data"
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
    
    # Initialiser les modules
    modules = {}
    
    try:
        # Initialiser GematriaOracle
        gematria_oracle = GematriaOracle(meta_systems)
        modules["GematriaOracle"] = gematria_oracle
        logger.info("Module GematriaOracle initialis√© avec succ√®s")
        
        # Initialiser les sous-modules de GematriaOracle
        gematria_oracle.calculateur = gematria_oracle.Calculateur(gematria_oracle)
        gematria_oracle.correspondance = gematria_oracle.Correspondance(gematria_oracle)
        gematria_oracle.traducteur = gematria_oracle.Traducteur(gematria_oracle)
        gematria_oracle.resonance_cyclique = gematria_oracle.R√©sonanceCyclique(gematria_oracle)
        logger.info("Sous-modules de GematriaOracle initialis√©s")
    except Exception as e:
        logger.error(f"Erreur lors de l'initialisation de GematriaOracle: {e}")
    
    try:
        # Initialiser PredictiveForge
        predictive_forge = PredictiveForge(meta_systems, data_path=os.path.join(data_dir, "predictive_forge"))
        modules["PredictiveForge"] = predictive_forge
        logger.info("Module PredictiveForge initialis√© avec succ√®s")
    except Exception as e:
        logger.error(f"Erreur lors de l'initialisation de PredictiveForge: {e}")
    
    try:
        # Initialiser IntegrationHub
        integration_hub = IntegrationHub(meta_systems)
        modules["IntegrationHub"] = integration_hub
        logger.info("Module IntegrationHub initialis√© avec succ√®s")
        
        # Enregistrer les modules dans IntegrationHub
        if "GematriaOracle" in modules:
            integration_hub.register_module("GematriaOracle", modules["GematriaOracle"])
        
        if "PredictiveForge" in modules:
            integration_hub.register_module("PredictiveForge", modules["PredictiveForge"])
        
        logger.info("Modules enregistr√©s dans IntegrationHub")
    except Exception as e:
        logger.error(f"Erreur lors de l'initialisation de IntegrationHub: {e}")
    
    # Cr√©er un rapport d'initialisation
    init_report = {
        "timestamp": datetime.now().isoformat(),
        "initialized_modules": list(modules.keys()),
        "success": len(modules) > 0
    }
    
    # Sauvegarder le rapport d'initialisation
    report_path = os.path.join(data_dir, "integration_initialization.json")
    with open(report_path, "w") as f:
        json.dump(init_report, f, indent=2)
    
    logger.info(f"Rapport d'initialisation sauvegard√© dans {report_path}")
    
    return modules

def integrate_with_arcan_brain(arcan_brain, modules):
    """
    Int√®gre les modules avanc√©s avec ArcanBrain.
    
    Args:
        arcan_brain: Instance d'ArcanBrain
        modules (dict): Modules d'int√©gration
        
    Returns:
        bool: True si l'int√©gration a r√©ussi, False sinon
    """
    logger.info("Int√©gration avec ArcanBrain")
    
    if not arcan_brain:
        logger.error("Instance ArcanBrain non fournie")
        return False
    
    # V√©rifier si IntegrationHub est disponible
    if "IntegrationHub" not in modules:
        logger.error("IntegrationHub non disponible")
        return False
    
    integration_hub = modules["IntegrationHub"]
    
    try:
        # Injecter la m√©thode d'enrichissement dans ArcanBrain
        original_analyze_match = arcan_brain.analyze_match
        
        def enhanced_analyze_match(match_data, arcan_x_results=None, shadow_odds_results=None):
            """Version am√©lior√©e de analyze_match qui int√®gre les modules avanc√©s."""
            # Appeler la m√©thode originale
            result = original_analyze_match(match_data, arcan_x_results, shadow_odds_results)
            
            # Enrichir les r√©sultats
            enriched_result = integration_hub.enrich_arcan_brain_analysis(result)
            
            return enriched_result
        
        # Remplacer la m√©thode d'ArcanBrain
        arcan_brain.analyze_match = enhanced_analyze_match
        
        logger.info("M√©thode analyze_match d'ArcanBrain enrichie avec succ√®s")
        
        # Injecter une m√©thode pour g√©n√©rer des insights avec GematriaOracle
        if "GematriaOracle" in modules:
            gematria_oracle = modules["GematriaOracle"]
            
            def generate_gematria_insight(match_data, language="fr"):
                """G√©n√®re des insights bas√©s sur la Gematria pour un match."""
                if not match_data:
                    return "Donn√©es de match insuffisantes pour l'analyse Gematria."
                
                # Extraire les informations des √©quipes
                home_team = match_data.get("home_team", "")
                away_team = match_data.get("away_team", "")
                
                if not home_team or not away_team:
                    return "Noms d'√©quipes manquants pour l'analyse Gematria."
                
                # Analyser le match avec GematriaOracle
                analysis = gematria_oracle.analyze_match(home_team, away_team)
                insights = gematria_oracle.generate_insights(analysis)
                
                # Formater les insights
                formatted_insights = []
                
                if "correspondances_notables" in insights:
                    formatted_insights.append(f"üìä {insights['correspondances_notables']}")
                
                if "signature_interpr√©tation" in insights:
                    formatted_insights.append(f"üîÆ {insights['signature_interpr√©tation']}")
                
                if "avantage_num√©rique" in insights:
                    formatted_insights.append(f"‚öñÔ∏è {insights['avantage_num√©rique']}")
                
                if "r√©sonance_temporelle" in insights:
                    formatted_insights.append(f"‚è∞ {insights['r√©sonance_temporelle']}")
                
                # Retourner le texte format√©
                if formatted_insights:
                    header = "üî¢ Analyse Gematria:\n"
                    return header + "\n".join(formatted_insights)
                else:
                    return "Aucun insight Gematria significatif d√©tect√© pour ce match."
            
            # Ajouter la m√©thode √† ArcanBrain
            arcan_brain.generate_gematria_insight = generate_gematria_insight
            
            logger.info("M√©thode generate_gematria_insight ajout√©e √† ArcanBrain")
        
        # Injecter une m√©thode pour les pr√©dictions XGBoost
        if "PredictiveForge" in modules:
            predictive_forge = modules["PredictiveForge"]
            
            def predict_with_xgboost(match_data, predict_score=True):
                """Effectue des pr√©dictions avec XGBoost pour un match."""
                if not match_data:
                    return "Donn√©es de match insuffisantes pour la pr√©diction XGBoost."
                
                results = {}
                
                # Pr√©dire le r√©sultat du match
                try:
                    match_result = predictive_forge.predict_match_result(match_data)
                    if match_result and "error" not in match_result:
                        results["match_result"] = match_result
                except Exception as e:
                    logger.error(f"Erreur lors de la pr√©diction du r√©sultat: {e}")
                
                # Pr√©dire le score si demand√©
                if predict_score:
                    try:
                        score_prediction = predictive_forge.predict_match_score(match_data)
                        if score_prediction and "error" not in score_prediction:
                            results["score_prediction"] = score_prediction
                    except Exception as e:
                        logger.error(f"Erreur lors de la pr√©diction du score: {e}")
                
                return results
            
            # Ajouter la m√©thode √† ArcanBrain
            arcan_brain.predict_with_xgboost = predict_with_xgboost
            
            logger.info("M√©thode predict_with_xgboost ajout√©e √† ArcanBrain")
        
        return True
    except Exception as e:
        logger.error(f"Erreur lors de l'int√©gration avec ArcanBrain: {e}")
        return False

def integrate_with_numeri_code(numeri_code, modules):
    """
    Int√®gre les modules avanc√©s avec NumeriCode.
    
    Args:
        numeri_code: Instance de NumeriCode
        modules (dict): Modules d'int√©gration
        
    Returns:
        bool: True si l'int√©gration a r√©ussi, False sinon
    """
    logger.info("Int√©gration avec NumeriCode")
    
    if not numeri_code:
        logger.error("Instance NumeriCode non fournie")
        return False
    
    # V√©rifier si GematriaOracle est disponible
    if "GematriaOracle" not in modules:
        logger.error("GematriaOracle non disponible")
        return False
    
    gematria_oracle = modules["GematriaOracle"]
    
    try:
        # Injecter une m√©thode pour int√©grer Gematria dans l'analyse num√©rique
        def analyze_with_gematria(team_name, numeric_sequence):
            """Analyse une s√©quence num√©rique avec Gematria."""
            if not team_name or not numeric_sequence:
                return "Donn√©es insuffisantes pour l'analyse Gematria."
            
            # Analyser le nom de l'√©quipe
            team_values = gematria_oracle.analyze_name(team_name)
            
            # Convertir la s√©quence en cha√Æne de caract√®res
            if isinstance(numeric_sequence, (list, tuple)):
                sequence_str = ''.join(map(str, numeric_sequence))
            else:
                sequence_str = str(numeric_sequence)
            
            # Chercher des correspondances
            correspondences = []
            for system, value in team_values.items():
                if isinstance(value, (int, float)) and str(value) in sequence_str:
                    correspondences.append(f"Correspondance entre {team_name} ({system}: {value}) et la s√©quence {sequence_str}")
            
            # Retourner les r√©sultats
            if correspondences:
                return "\n".join(correspondences)
            else:
                return "Aucune correspondance Gematria significative d√©tect√©e."
        
        # Ajouter la m√©thode √† NumeriCode
        numeri_code.analyze_with_gematria = analyze_with_gematria
        
        logger.info("M√©thode analyze_with_gematria ajout√©e √† NumeriCode")
        
        return True
    except Exception as e:
        logger.error(f"Erreur lors de l'int√©gration avec NumeriCode: {e}")
        return False

def integrate_with_score_matrix(score_matrix, modules):
    """
    Int√®gre les modules avanc√©s avec ScoreMatrix.
    
    Args:
        score_matrix: Sous-module ScoreMatrix
        modules (dict): Modules d'int√©gration
        
    Returns:
        bool: True si l'int√©gration a r√©ussi, False sinon
    """
    logger.info("Int√©gration avec ScoreMatrix")
    
    if not score_matrix:
        logger.error("Instance ScoreMatrix non fournie")
        return False
    
    # V√©rifier si PredictiveForge est disponible
    if "PredictiveForge" not in modules:
        logger.error("PredictiveForge non disponible")
        return False
    
    predictive_forge = modules["PredictiveForge"]
    
    try:
        # Injecter une m√©thode pour enrichir l'analyse de score
        def enhance_score_analysis(match_data):
            """Enrichit l'analyse de score avec les pr√©dictions XGBoost."""
            if not match_data:
                return "Donn√©es de match insuffisantes pour l'analyse enrichie."
            
            # Pr√©dire le score avec PredictiveForge
            score_prediction = predictive_forge.predict_match_score(match_data)
            
            if "error" in score_prediction:
                return f"Erreur lors de la pr√©diction: {score_prediction['error']}"
            
            # Retourner les pr√©dictions
            return score_prediction
        
        # Ajouter la m√©thode √† ScoreMatrix
        score_matrix.enhance_with_xgboost = enhance_score_analysis
        
        logger.info("M√©thode enhance_with_xgboost ajout√©e √† ScoreMatrix")
        
        return True
    except Exception as e:
        logger.error(f"Erreur lors de l'int√©gration avec ScoreMatrix: {e}")
        return False

def get_integration_hub(modules):
    """
    R√©cup√®re l'instance d'IntegrationHub.
    
    Args:
        modules (dict): Modules d'int√©gration
        
    Returns:
        IntegrationHub: Instance d'IntegrationHub, None si non disponible
    """
    return modules.get("IntegrationHub")

def get_gematria_oracle(modules):
    """
    R√©cup√®re l'instance de GematriaOracle.
    
    Args:
        modules (dict): Modules d'int√©gration
        
    Returns:
        GematriaOracle: Instance de GematriaOracle, None si non disponible
    """
    return modules.get("GematriaOracle")

def get_predictive_forge(modules):
    """
    R√©cup√®re l'instance de PredictiveForge.
    
    Args:
        modules (dict): Modules d'int√©gration
        
    Returns:
        PredictiveForge: Instance de PredictiveForge, None si non disponible
    """
    return modules.get("PredictiveForge")